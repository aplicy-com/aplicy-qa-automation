name: Selenium Tests with Allure Reporting to GitHub Pages

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the repository
      - name: Checkout repository
        uses: actions/checkout@v3

      # Step 2: Set up JDK 21 with Temurin distribution
      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'temurin'

      # Step 3: Set up Chrome browser
      - name: Setup Chrome
        uses: browser-actions/setup-chrome@latest

      # Step 4: Set up ChromeDriver for Selenium tests
      - name: Setup ChromeDriver
        uses: nanasess/setup-chromedriver@v2

      # Step 5: Build the project and run the tests using Gradle
      - name: Build with Gradle and Run Tests
        run: |
          # Set display for running in headless mode
          export DISPLAY=:99
          
          # Start ChromeDriver in the background
          chromedriver --url-base=/wd/hub &
          
          # Start a virtual display to support graphical rendering (headless mode)
          sudo Xvfb -ac :99 -screen 0 1280x1024x24 > /dev/null 2>&1 &
          
          # Run Gradle tests and generate Allure report
          ./gradlew clean test allureReport

      # Step 6: Fetch the previous Allure history from the gh-pages branch
      - name: Get Allure history
        uses: actions/checkout@v3
        if: always()
        continue-on-error: true
        with:
          ref: gh-pages
          path: allure-history

      # Step 7: Generate the Allure report
      - name: Generate Allure Report
        uses: simple-elf/allure-report-action@master
        if: always()
        with:
          allure_results: build/allure-results
          allure_history: allure-history
          keep_reports: 20

      # Step 8: Create .nojekyll to bypass Jekyll processing on GitHub Pages
      - name: Create .nojekyll file
        run: echo "" > allure-history/.nojekyll

      # Step 9: Upload Allure report to GitHub Pages
      - name: Upload artifact for GitHub Pages
        uses: actions/upload-pages-artifact@v3
        with:
          path: allure-history

  # Deployment to GitHub Pages
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
